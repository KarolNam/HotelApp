@page "/updateinvoice/{invoiceId}"
@using HotelApp.Database.Entities;
@using Microsoft.EntityFrameworkCore;
@rendermode InteractiveServer

<PageTitle>Edit an invoice</PageTitle>

<div class="SiteBox animatedSlideFromUp">
	<EditForm FormName="EditAnInvoke" Model="invoice" OnSubmit="SaveInvoice" autocomplete="off">
		<div class="form-container">
			<DataAnnotationsValidator />
			<h3 style="text-align: center;">Edit an invoice</h3>
			<br />
			<h3 style="text-align: center;">Choose status</h3>
			<InputSelect id="InvoiceStatus" class="form-control" @bind-Value="invoice.Status">
				<option value="Pending">Pending</option>
				<option value="Paid">Paid</option>
				<option value="Cancelled">Cancelled</option>
				<option value="Refunded">Refunded</option>
				<option value="Processing">Processing</option>
				<option value="Failed">Failed</option>
			</InputSelect>
			<div style="background: white; display: inline-flex; font-size: 24px;">
				<ValidationMessage For="(() => invoice.Status)"></ValidationMessage>
			</div>
			<div class="button-box">
				<button type="submit" class="button-form">Save an invoice</button>
			</div>
			<div class="button-box">
				<button class="button-form" @onclick="Cancel">Cancel</button>
			</div>
		</div>
	</EditForm>
</div>

@inject HttpClient Http
@inject NavigationManager Navigation
@inject Database.AppDbContext dbContext
@code
{
	[Parameter]
	public string invoiceId { get; set; }
	[SupplyParameterFromForm]
	public Invoice invoice { get; set; }
	public List<Reservation> reservationsList = new();
	public List<Guest> guestsList = new();
	public List<Room> roomsList = new();
	private string? message;
	int actualReservationId;
	string actualStatus;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		var dbInvoice = dbContext.Invoices.FirstOrDefault(i => i.Id == int.Parse(invoiceId));
		if (dbInvoice != null)
		{
			invoice = new Invoice
				{
					ReservationId = dbInvoice.ReservationId,
					Status = dbInvoice.Status
				};
			actualReservationId = dbInvoice.ReservationId;
			actualStatus = dbInvoice.Status;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		reservationsList = await Http.GetFromJsonAsync<List<Reservation>>("api/Reservation");
		guestsList = await Http.GetFromJsonAsync<List<Guest>>("api/Guest");
		roomsList = await Http.GetFromJsonAsync<List<Room>>("api/Room");
	}

	private async Task SaveInvoice()
	{
		var dbInvoice = dbContext.Invoices.FirstOrDefault(i => i.Id == int.Parse(invoiceId));
		dbInvoice.ReservationId = actualReservationId;
		dbInvoice.Status = invoice.Status;
		await dbContext.SaveChangesAsync();
		Navigation.NavigateTo("/invoicelist");
	}

	private void Cancel()
	{
		invoice.ReservationId = actualReservationId;
		invoice.Status = actualStatus;
		Navigation.NavigateTo("/invoicelist");
	}
}