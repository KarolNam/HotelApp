@page "/updatereservation/{reservationId}"
@using HotelApp.Database.Entities
@using Microsoft.EntityFrameworkCore;
@rendermode InteractiveServer

<PageTitle>Edit reservation</PageTitle>

<div class="SiteBox animatedSlideFromUp">
	<EditForm method="post" FormName="EditReservation" OnValidSubmit="SaveReservation" Model="reservation" autocomplete="off">
		<div class="form-container">
			<DataAnnotationsValidator />
			<h3 style="text-align: center;">Edit a reservation</h3>
			<br />
			<h3>Filter guests by lastname</h3>
			<InputText id="GuestLastName" class="form-control" @bind-Value="lastname"></InputText>
			<br />
			<h3 style="text-align: center">Choose guest</h3>
			<InputSelect id="GuestId" class="form-control" @bind-Value="reservation.GuestId">
				@if (lastname == string.Empty)
				{
					<option value="">Choose guest</option>
					foreach (var guest in guestsList)
					{
						<option value="@guest.Id">@guest.FirstName | @guest.LastName | @guest.Phone</option>
					}
				}
				else
				{
					<option value="">Choose guest</option>
					foreach (var guest in guestsList.Where(g => g.LastName.ToLower().Contains(lastname.ToLower())))
					{
						<option value="@guest.Id">@guest.FirstName | @guest.LastName | @guest.Phone</option>
					}
				}
			</InputSelect>
			<div style="background: white; display: inline-flex; font-size: 24px;">
				<ValidationMessage For="(() => reservation.GuestId)"></ValidationMessage>
			</div>
			<br />
			<h3>Filter rooms by type</h3>
			<InputSelect id="roomtype" class="form-control" @bind-Value="roomType">
				<option value="">Choose room type filter</option>
				<option value="Standard">Standard</option>
				<option value="Premium">Premium</option>
				<option value="Deluxe">Deluxe</option>
			</InputSelect>
			<br />
			<h3 style="text-align: center">Choose room</h3>
			<InputSelect id="RoomId" class="form-control" @bind-Value="reservation.RoomId">
				@if (roomType == string.Empty)
				{
					<option value="">Choose room</option>
					foreach (var room in roomsList.Where(r => r.IsAvailable == true || r.Id == actualRoom))
					{
						<option value="@room.Id">@room.RoomNumber | @room.Type | @room.PricePerNight</option>
					}
				}
				else
				{
					<option value="">Choose room</option>
					foreach (var room in roomsList.Where(r => (r.IsAvailable == true || r.Id == actualRoom) && r.Type.ToLower().Contains(roomType.ToLower())))
					{
						<option value="@room.Id">@room.RoomNumber | @room.Type | @room.PricePerNight</option>
					}
				}
			</InputSelect>
			<div style="background: white; display: inline-flex; font-size: 24px;">
				<ValidationMessage For="(() => reservation.RoomId)"></ValidationMessage>
			</div>
			<br />
			<h3 style="text-align: center">Check out date</h3>
			<InputDate id="CheckOutDate" class="form-control" @bind-Value="reservation.CheckOutDate" />
			<div style="background: white; display: inline-flex; font-size: 24px;">
				<ValidationMessage For="(() => reservation.CheckOutDate)"></ValidationMessage>
			</div>
			<div class="button-box">
				<button type="submit" class="button-form">Save reservation</button>
			</div>
			<div class="button-box">
				<button class="button-form" @onclick="Cancel">Cancel</button>
			</div>
		</div>
	</EditForm>
</div>

@inject HttpClient Http
@inject NavigationManager Navigation
@inject Database.AppDbContext dbContext
@code
{
	[Parameter]
	public string reservationId { get; set; }
	[SupplyParameterFromForm]
	public Reservation reservation { get; set; }
	[SupplyParameterFromForm]
	private string? lastname { get; set; } = string.Empty;
	[SupplyParameterFromForm]
	private string? roomType { get; set; } = string.Empty;
	public List<Guest> guestsList = new();
	public List<Room> roomsList = new();
	public List<Reservation> reservationsList = new();
	private string? message;
	int actualGuest, actualRoom;
	DateTime actualCheckOut;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		var dbReservation = dbContext.Reservations.FirstOrDefault(r => r.Id == int.Parse(reservationId));
		if (dbReservation != null)
		{
			reservation = new Reservation
				{
					GuestId = dbReservation.GuestId,
					RoomId = dbReservation.RoomId,
					CheckOutDate = dbReservation.CheckOutDate
				};
			actualRoom = dbReservation.RoomId;
			actualGuest = dbReservation.GuestId;
			actualCheckOut = dbReservation.CheckOutDate;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		reservationsList = await Http.GetFromJsonAsync<List<Reservation>>("api/Reservation");
		guestsList = await Http.GetFromJsonAsync<List<Guest>>("api/Guest");
		roomsList = await Http.GetFromJsonAsync<List<Room>>("api/Room");
	}

	private async Task SaveReservation()
	{
		if (reservation.CheckOutDate <= DateTime.Now)
		{
			message = "Check out date must be minimum next day!";
		}
		else
		{
			var dbReservation = dbContext.Reservations.FirstOrDefault(r => r.Id == int.Parse(reservationId));
			if (reservation.GuestId != actualGuest)
			{
				dbReservation.GuestId = reservation.GuestId;
			}
			if (reservation.RoomId != actualRoom)
			{
				dbReservation.RoomId = reservation.RoomId;
			}
			dbReservation.CheckOutDate = reservation.CheckOutDate;
			dbReservation.CheckOutDate = dbReservation.CheckOutDate.Date.AddHours(12);
			var room = dbContext.Rooms.FirstOrDefault(r => r.Id == dbReservation.RoomId);
			if (dbReservation.CheckInDate.TimeOfDay > new TimeSpan(12, 0, 0))
			{
				dbReservation.TotalPrice = ((dbReservation.CheckOutDate - dbReservation.CheckInDate).Days + 1) * room.PricePerNight;
			}
			else if (dbReservation.CheckInDate.TimeOfDay <= new TimeSpan(12, 0, 0))
			{
				dbReservation.TotalPrice = (dbReservation.CheckOutDate - dbReservation.CheckInDate).Days * room.PricePerNight;
			}
			await dbContext.SaveChangesAsync();
			Navigation.NavigateTo("/reservationlist");
		}
	}

	private void Cancel()
	{
		reservation.GuestId = actualGuest;
		reservation.RoomId = actualRoom;
		reservation.CheckOutDate = actualCheckOut;
		Navigation.NavigateTo("/reservationlist");
	}
}